#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

payload=$(mktemp $TMPDIR/github-bosh-release-resource-request.XXXXXX)

cat > $payload <&0

owner=$(jq -r '.source.owner // ""' < $payload)
repository=$(jq -r '.source.repository // ""' < $payload)
version=$(jq -r '.version.version // ""' < $payload)
fetch_tarball=$(jq -r '.params.tarball != false' < $payload)

if [ -z "$repository" ]; then
  echo "must specify source repository"
  exit 1
fi

if [ -z "$version" ]; then
  echo "must specify version"
  exit 1
fi

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

mkdir -p $destination

release_data=$(mktemp $TMPDIR/github-bosh-release.XXXXXX)

curl \
  --silent \
  --retry 5 \
  --fail \
  --location \
  "https://api.github.com/repos/${owner}/${repository}/releases" | \
  jq 'map(select(.tag_name == $version))[0]' --arg version "$version" > \
  $release_data

url="$(jq -r .tarball_url < $release_data)"

if [ "$url" = "null" ]; then
  echo "version $version not found; aborting"
  exit 1
fi

echo "$url" > $destination/url
echo "$version" > $destination/version

if [ "$fetch_tarball" = "true" ]; then
  pushd $destination >/dev/null
    curl --retry 5 --fail -L "$url" -o release.tgz
  popd >/dev/null
fi

jq -n '{
  version: { version: $version },
  metadata: [
    { name: "url", value: $url },
    { name: "sha1", value: $sha1 }
  ]
}' --arg version "$version" --arg url "$url" --arg sha1 "$sha1" >&3
